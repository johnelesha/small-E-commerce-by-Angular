stages:
  - build
  - test
  - deploy

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CI_REGISTRY: $CI_REGISTRY  # GitLab Container Registry
  CI_REGISTRY_IMAGE: $CI_REGISTRY/$CI_PROJECT_PATH

# Build Docker image
build_image:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  only:
    - main

# Run tests
unit_tests:
  stage: test
  image: node:18-alpine
  script:
    - npm install
    - npm test
    - npm run lint

e2e_tests:
  stage: test
  image: cypress/included:12.0.0
  script:
    - npm install
    - npm run e2e

# Deploy to production (manual trigger)
deploy_production:
  stage: deploy
  image: alpine:3.16
  script:
    - apk add --no-cache openssh-client rsync
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - ssh-keyscan $SERVER_IP >> ~/.ssh/known_hosts
    - ssh $SSH_USER@$SERVER_IP "docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA && docker stop angular-app || true && docker rm angular-app || true && docker run -d -p 80:80 --name angular-app $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA"
  when: manual
  only:
    - main

